apply plugin: 'java'
apply plugin: 'base'
apply plugin: 'maven'

version = '1.0'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'http://repo.springsource.org/plugins-release' }
        jcenter()
    }
    dependencies {
        classpath 'org.gradle.api.plugins:gradle-cargo-plugin:0.6.1'
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.1'
    }
}

ext {
    javaVersion = 1.8
    slf4jVersion = '1.7.5'
    springVersion = "4.0.6.RELEASE"
}

version = '1.0'

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'

    sourceCompatibility = rootProject.ext.javaVersion
    targetCompatibility = rootProject.ext.javaVersion

    /* start sourceSets */
    String hostname = InetAddress.getLocalHost().getHostName().toLowerCase();
    if (hostname.endsWith('.local')) {
        hostname = hostname.replace(".local", '')
    }
    sourceSets {
        main.java.srcDirs = ['src/main/java']
        test.java.srcDirs = ['src/test/java']
        main.resources.srcDirs = ['src/main/resources', "src/main/resources-" + hostname]
        test.resources.srcDirs = ['src/test/resources', "src/test/resources-" + hostname]
    }
//    sourceSets.all {
//        println 'sourceSets.all : ' + name
//    }
    sourceSets.all {
        set ->
            set.allSource.srcDirs.each {
                if (!it.exists()) {
                    // println it
                    it.mkdirs()
                }
            }
    }
    /* end sourceSets */

    /* start logs folder create */
    def logsDir = new File('logs')
    if (!logsDir.isDirectory()) {
        logsDir.mkdirs()
    }
    /* end logs folder create */

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        compile 'org.slf4j:slf4j-api:1.7.6'
        compile 'org.slf4j:jcl-over-slf4j:1.7.6'
        compile 'ch.qos.logback:logback-classic:1.0.13'
        compile 'ch.qos.logback:logback-core:1.0.13'

        compile "org.slf4j:jcl-over-slf4j:${rootProject.ext.slf4jVersion}"
        compile "org.slf4j:log4j-over-slf4j:${rootProject.ext.slf4jVersion}"
        compile "org.slf4j:slf4j-api:${rootProject.ext.slf4jVersion}"

        provided 'org.projectlombok:lombok:1.12.6'
        testCompile "junit:junit:4.11"
        testCompile 'org.mockito:mockito-all:1.9.5'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile "org.springframework:spring-test:${rootProject.ext.springVersion}"
    }
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
}